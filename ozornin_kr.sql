drop table if exists courses, reviews cascade;

create table courses (
       id int primary key generated by default as identity,
       name text,
       description text
);

create table reviews (
       id int primary key generated by default as identity,
       text text,
       stars int,
       course_id int references courses
);

insert into courses(name, description) (
values ('CS50', 'Computer Science 50 course'),
       ('CS60', 'Computer Science 60 course')
);

insert into reviews(text, stars, course_id) (
values ('Best course ever', 10, 1),
       ('I like that', 8, 1),
       ('Just a copy of CS50', 1, 2),
       ('Just a copy of CS50', 1, 2)
);

select c.id,
       c.name,
       c.description,
       coalesce(json_agg(json_build_object(
		'id', r.id, 'text', r.text, 'stars', r.stars))
	filter (where r.id is not null), '[]')
	  as appointments
from courses c
     left join reviews r on c.id = r.course_id
group by c.id;

drop table if exists patients, appointments cascade;

create table patients (
       id int primary key generated by default as identity,
       first_name text,
       last_name text,
       birth_date date,
       sex text
);

create table appointments (
       id int primary key generated by default as identity,
       date date,
       diagnose text,
       patient_id int references patients
);


insert into patients(first_name, last_name, birth_date, sex) (
values ('Marko', 'Arsenovich', '2005-11-25', 'M'),
       ('Anton', 'Otroshenko', '2006-02-09', 'M'),
       ('Matvey', 'Ozornin', '2006-04-23', 'M'),
       ('Fedya', 'Eremin', '2006-02-15', 'M')
);

insert into appointments(date, diagnose, patient_id) (
values ('2023-02-27', 'Voenkomat', 1),
       ('2023-02-27', 'flu', 1),
       ('2023-02-27', 'Voenkomat', 2),
       ('2023-02-27', 'flu', 2),
       ('2023-09-24', 'Voenkomat', 3),
       ('2023-09-24', 'flu', 3),
       ('2023-02-27', 'Voenkomat', 4),
       ('2023-02-27', 'flu', 4)
);

select p.id,
       p.first_name,
       p.last_name,
       p.birth_date,
       p.sex,
       coalesce(json_agg(json_build_object(
		'id', a.id, 'date', a.date, 'diagnose', a.diagnose))
	filter (where a.id is not null), '[]')
	  as appointments
from patients p
     left join appointments a on p.id = a.patient_id
group by p.id;

drop table if exists repos, tickets cascade;

create table repos(
       id int primary key generated by default as identity,
       name text,
       description text,
       stars int
);

create table tickets(
       id int primary key generated by default as identity,
       name text,
       description text,
       status text,
       repo_id int references repos
);

insert into repos(name, description, stars) (
values ('709_22_1', 'No description, website, or topics provided.', 0),
       ('dotfiles', 'Pretty dotfiles.', 999),
       ('rustlings', ':crab:', 1578)
);

insert into tickets(name, description, repo_id, status) (
values ('Hi!', 'Can you accept this pr, i want a shirt!', 1, 'Closed x'),
       ('Hi!', 'Can you accept this pr, i want a shirt!', 2, 'Closed x'),
       ('Hi!', 'Can you accept this pr, i want a shirt!', 3, 'Closed x'),
       ('Changes in README!', 'I found this punctuation error', 1, 'Closed x'),
       ('Changes in README!', 'I found this punctuation error', 2, 'Closed x'),
       ('Changes in README!', 'I found this punctuation error', 3, 'Closed x')
);

select r.id,
       r.name,
       r.description,
       r.stars,
       coalesce(json_agg(json_build_object(
		'id', t.id, 'name', t.name, 'status', t.status))
	filter (where t.id is not null), '[]')
	  as appointments
from repos r
     left join tickets t on r.id = t.repo_id
group by r.id;
